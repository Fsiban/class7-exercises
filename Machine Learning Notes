Github class notes

https://cce-bigdataintro-1160.github.io/CEBD-1160/8-ml.html

If you have a target it is always supervised.
Un supervised is if youdon't know the result, you don't have a target.

Supervised Classification
use cases: remote sensing

Supervised Regression
use cases:Stock price

Unsupervised Learning
use cases:
https://stackoverflow.com/questions/26182980/can-anyone-give-a-real-life-example-of-supervised-learning-and-unsupervised-lear

X - is what you want to predict eg diagnosis

Class exercise 1
For your chosen dataset, create the train and test splits. Print the shape of the full initial dataset and then the shape of each of the 4 split datasets X_train, X_test, y_train, y_test

Solution:
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split

diabetes = load_breast_cancer()
feature_names = diabetes.feature_names
X = diabetes.data
y = diabetes.target

# Splitting features and target datasets into: train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35)

# Printing original Dataset
print(f"X.shape: {X.shape}, y.shape: {y.shape}")

# Printing splitted datasets
print(f"X_train.shape: {X_train.shape}, y_train.shape: {y_train.shape}")
print(f"X_test.shape: {X_test.shape}, y_test.shape: {y_test.shape}")


If we split it using pandas (Wine data set example)

Solution:

import pandas as pd
import numpy as np

# Loading data using our pandas DataFrames (as in all previous classes)
from sklearn.model_selection import train_test_split

wine_df = pd.read_csv('wine.data',
                      sep=',',
                      header=0)
wine_df.columns = ['class', 'alcohol', 'malic_acid', 'ash', 'alcalinity_of_ash', 'magnesium', 'total_phenols',
                   'flavanoids',
                   'nonflavanoid_phenols', 'proanthocyanins', 'color_intensity', 'hue', 'od280 od315_of_diluted_wines',
                   'proline']

X = wine_df.drop('class', axis=1)
y = wine_df['class']

print(f'Dataset X shape: {X.shape}')
print(f'Dataset y shape: {y.shape}')

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35)

# Printing splitted datasets
print(f"X_train.shape: {X_train.shape}, y_train.shape: {y_train.shape}")
print(f"X_test.shape: {X_test.shape}, y_test.shape: {y_test.shape}")


formula for linea regression
y=mx+b
y=mx+nx+c

